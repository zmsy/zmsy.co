title: The Uncomfortable Practice of Talking With Business Folk About Automation
---
author: Zach Morrissey
---
body:

## So...Why Should We Automate This?

One of the major stopping points in conversations with business users I've noticed is the conversation around automation. For most people who've never programmed or written more than a _"Hello World!"_, automation is a confusing black box. The **type of automation I'm referencing is specific to scenarios wherein there exists no readily available commodity software that can solve the problem** (e.g. no "Version control? Git! Spreadsheet? Excel!").

Typical motivation:

- Current system is resulting in too many issues/errors.
- Not scalable.
- Reducing time that could be spent doing more productive things.

Conversations about it often form two sides:

- For engineers and other technical users, the benefits of automation are palpable and usually obvious.
- For non-technical folk, the benefits usually come down to some variation on three specifics:
  - Unlocking new capabilities.
  - Making things easier.
  - Delivering faster.

Since I work on a Data Science and Analytics team, a large portion of our audience is non-technical business users. I notice that, for people who've never been involved in the process of automating a task or process, these are not motivating factors. Try as we might, we normally don't approach this stuff from a fully altruistic angle, and it's usually that automating something being done manually has downstream benefits for us.

Having this conversation is _never_ simple or without controversy though.

### Reasons End Users Dislike The Process of Automation

If done well, very few people ever complain about automation unless their jobs depend on tasks not being automated. This group is not the focus of this post; it assumes these users have other pressing tasks they'd normally be spending their time on. However, the process of creating an automated system to handle manual tasks is, in my experience, an arduous process. 

The top reasons I've noticed:

- **Loss of Control** - This is normally the first and most important aspect of the conversation. A lot of people have grown accustomed to being able to handle something on their own, and they know intuitively when things are right and wrong. They have the ability to adjust outputs if they don't look right, or provide feedback where they think inputs are wrong.
- **No Common Understanding** - This is the most obvious point here, as everyone expects. There are a lot of fundamental concepts about automation that business users don't understand. Since most users are normally locked into a GUI with an interactive workflow, designing something to be run on a headless system that doesn't respond to user input is a very foreign model of computing. Users are usually concerned with how _they_ interact with it.
- **Fear of Upfront Costs** - For the short term, there's normally a higher upfront time investment required for automating something.
- **New Tool & Skill Requirements** - Outside of technical disciplines, adding new skills to your toolkit is not always directly rewarded. Adding technical complexity is usually not something that factors into their decision calculus.

The first two are usually scary enough to end users that they don't want to field questions about automating things.

## The Culture Divide

Business users such as those in finance or sales are usually under some sort of incentive system that rewards personal triumph as an outcome of executing a small set of relatively fixed goals well. The difficult part of this conversation often is that you're effectively trying to convince them to adopt an engineer's mindset: if some part of the process is faulty or is non-scalable, it's a fault of the process itself. For those who spend a lot of their time in non-technical business positions, this is a source of frustration when talking to engineers.

Oftentimes, it's difficult to avoid minimizing the issues. From the perspective of someone who has software engineering skills, it's often first seen as a slight against the problem itself. One thing I've learned is that this is normally never the case. As an engineer approaching the problem, I will rarely if ever have the depth of knowledge about the problem space compared to the business user that I'm working with. Combine that with a not-unique-to-me tendency to underestimate how long delivering an automated solution will take, I realize now that it's often come across like me both acting condescending and not delivering on what I promise.

## The Unknown Benefits of Automation

There's a lot that end users might not see or understand, but are normally provable benefits of automating something.

- Fixes Upstream Issues - A lot of the time, end users will fix problems that they see and not document them. When you automate a process, you need reasonable assumptions that you can make, and a lot of the time this forces upstream issues to be fixed.
- Less Error-prone - A lot of the time manual reporting or processes are done on a regular basis it usually follows some sort of prescribed process or script. People don't know how often they mess this stuff up, whereas with an automated system you can write tests to verify that all of your pre-conditions are met. One of the biggest wins for my stakeholders is often how much less time they spend triaging issues that arise.

## My Approach

- Be empathetic. This may seem like an obvious platitude, but _caring_ about their position in this situation is required for a solution that genuinely helps users out.
- Talk about pieces of the work as functions, with an input and an output.
---
pub_date: 2018-03-01
---
twitter_handle: _zmsy
---
_discoverable: yes
